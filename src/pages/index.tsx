//TODO fix the sort function and add created_at to rooms table
import Chatroom from '@/components/Chatroom';
import Modal from '@/components/Modal';
import { modalState } from '@/helpers/atoms';
import { PlusIcon } from '@/helpers/icons';
import useAuth from '@/hooks/useAuth';
import { Room } from '@/typings';
import Head from 'next/head'
import { useEffect, useState } from 'react'
import { useRecoilState } from 'recoil';
export default function Home() {
  const { user, token, redirect, socket } = useAuth()
  const [_, setShowModal] = useRecoilState(modalState)
  const [rooms, setRooms] = useState<Room[]>([])
  const [currentRoom, setCurrentRoom] = useState<Room | null>(null)
  const loadRooms = async (roomId?: number) => {
    const headers = {
      headers: {
        'x-access-token': `${token}`
      }
    }
    const response = await fetch(`${process.env.NEXT_PUBLIC_SERVER_HOST}/roomsByUser`, headers)
    if (!roomId && response.status === 200) {
      const rows = (await response.json()).data
      rows.forEach(async (row: { room: number }) => {
        const lastMessageResponse = await fetch(`${process.env.NEXT_PUBLIC_SERVER_HOST}/messages?room=${row.room}&limit=1`, headers)
        if (lastMessageResponse.status === 200) {
          const lastmessage = (await lastMessageResponse.json()).data[0]
          const roomDataResponse = await fetch(`${process.env.NEXT_PUBLIC_SERVER_HOST}/room?room=${row.room}`, headers)
          if (roomDataResponse.status === 200) {
            const roomData = (await roomDataResponse.json()).data[0]
            const roomObject = {
              roomId: roomData.id,
              name: roomData.name,
              lastMessage: lastmessage
            }
            setRooms(prevRooms => [...prevRooms, roomObject])
          }
        }
      })
    }
    else if (roomId && response.status === 200) {
      // remove outdated room
      setRooms(prevRooms => {
        const oldRoom = prevRooms.findIndex(r => r.roomId == roomId)
        if (oldRoom > -1) prevRooms.splice(oldRoom, 1)
        return prevRooms
      })
      const rows = (await response.json()).data
      if (rows.find((row: { room: number }) => row.room === roomId)) {
        const lastMessageResponse = await fetch(`${process.env.NEXT_PUBLIC_SERVER_HOST}/messages?room=${roomId}&limit=1`, headers)
        if (lastMessageResponse.status === 200) {
          const lastmessage = (await lastMessageResponse.json()).data[0]
          const roomDataResponse = await fetch(`${process.env.NEXT_PUBLIC_SERVER_HOST}/room?room=${roomId}`, headers)
          if (roomDataResponse.status === 200) {
            const roomData = (await roomDataResponse.json()).data[0]
            const roomObject = {
              roomId: roomData.id,
              name: roomData.name,
              lastMessage: lastmessage
            }
            setRooms(prevRooms => [...prevRooms, roomObject])
          }
        }
      }
    }
  }
  useEffect(() => {
    if (user) loadRooms()
  }, [user])
  useEffect(() => {
    if (socket) {
      socket.on('addedToRoom', (roomId) => {
        loadRooms(parseInt(roomId))
      })
      socket.on('message', (message) => {
        const { room } = JSON.parse(message)
        loadRooms(room)
      })
    }
  }, [socket])
  return (
    <>
      {
        redirect ? "Loading ..." :
          <>
            <Head>
              <title>Chatapp</title>
              <meta name="description" content="Generated by create next app" />
              <meta name="viewport" content="width=device-width, initial-scale=1" />
              <link rel="icon" href="/favicon.ico" />
            </Head>
            <div className="flex w-full">
              <div className="w-[30%]">
                <div className="flex justify-between">
                  <h1 className="text-xl px-5 pt-5 mb-5">Chats</h1>
                  <div className="flex items-center">
                    <button className="h-9 p-2 m-2 rounded-lg bg-indigo-600 justify-center" onClick={() => setShowModal(true)}><PlusIcon /> </button>
                  </div>
                </div>
                <div className="flex flex-col overflow-y-scroll h-screen">
                  {
                    rooms.slice(0).sort((a, b) => {
                      const keyA = new Date(a.lastMessage.sent_at!)
                      const keyB = new Date(b.lastMessage.sent_at!)
                      if (keyA > keyB) return -1;
                      if (keyA < keyB) return 1;
                      return 0
                    })
                      .map((room, i) => (
                        <div key={i}>
                          <div className="p-5 hover:bg-gray-800 cursor-pointer" onClick={() => setCurrentRoom(room)}>
                            <p className="text-lg font-bold">{room.name}</p>
                            {
                              room.lastMessage ?
                                <p className="mb-5">{room.lastMessage.from} : {room.lastMessage.content}</p> :
                                <p>No messages</p>
                            }
                          </div>
                          <hr className="bg-[gray]" />
                        </div>
                      ))
                  }
                </div>
              </div>
              <div className="w-full">
                <Chatroom roomId={currentRoom?.roomId || 0} roomName={currentRoom?.name || ""} />
              </div>
            </div>
            <Modal />
          </>
      }
    </>
  )
}

